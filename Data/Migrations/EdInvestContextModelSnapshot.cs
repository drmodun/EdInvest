// <auto-generated />
using System;
using System.Collections.Generic;
using Data.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(EdInvestContext))]
    partial class EdInvestContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "item_type", new[] { "course", "application", "bootcamp", "online_course", "event" });
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "hstore");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Shared.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("98d5078f-77f5-4434-a341-ec3962082598"),
                            Description = "Everything connected to the field of informatics and IT",
                            Name = "IT"
                        },
                        new
                        {
                            Id = new Guid("b0c97478-5310-4f24-9eee-6049d08f3e97"),
                            Description = "Everything connected to the field of Maths from calculus to applied matheatics",
                            Name = "Maths"
                        },
                        new
                        {
                            Id = new Guid("a6413346-1556-4533-ad74-00326d536b43"),
                            Description = "Everything connected to the field of Phyisics from quantum mechanics to experimental phyisics",
                            Name = "Phyisics"
                        },
                        new
                        {
                            Id = new Guid("6ac1a39b-eab0-4d83-92e0-e371eeffff3f"),
                            Description = "Everything connected to the field of Chemistry from organic chemistry to inorganic chemistry",
                            Name = "Chemistry"
                        },
                        new
                        {
                            Id = new Guid("7a72f249-29bd-41f0-b44f-28391b17b17b"),
                            Description = "Everything connected to the field of Biology from molecular biology to zoology",
                            Name = "Biology"
                        },
                        new
                        {
                            Id = new Guid("27570ac3-1f57-4dcc-9335-c82bae4cd9a8"),
                            Description = "Everything connected to the field of Economics from microeconomics to macroeconomics",
                            Name = "Economics"
                        });
                });

            modelBuilder.Entity("Shared.Models.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Field");
                });

            modelBuilder.Entity("Shared.Models.Investments", b =>
                {
                    b.Property<Guid>("InvestorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<int>("Tier")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("InvestorId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("Investments");

                    b.HasData(
                        new
                        {
                            InvestorId = new Guid("e8b0c149-6eb0-4c7c-a6ce-0bc611d6811c"),
                            ItemId = new Guid("70c53c66-2506-4f04-9fc3-52fa6c974345"),
                            Amount = 10m,
                            Tier = 1,
                            UpdatedAt = new DateTime(2023, 5, 19, 21, 11, 31, 693, DateTimeKind.Utc).AddTicks(7773)
                        },
                        new
                        {
                            InvestorId = new Guid("0168eabd-999e-4c37-9c1a-5f198f2a90c8"),
                            ItemId = new Guid("2767b9f3-6573-4b88-9df5-a9974601a020"),
                            Amount = 100m,
                            Tier = 2,
                            UpdatedAt = new DateTime(2023, 5, 19, 21, 11, 31, 693, DateTimeKind.Utc).AddTicks(7778)
                        },
                        new
                        {
                            InvestorId = new Guid("0168eabd-999e-4c37-9c1a-5f198f2a90c8"),
                            ItemId = new Guid("c31cd899-2cd7-4829-be5f-681186f65240"),
                            Amount = 10000m,
                            Tier = 3,
                            UpdatedAt = new DateTime(2023, 5, 19, 21, 11, 31, 693, DateTimeKind.Utc).AddTicks(7780)
                        },
                        new
                        {
                            InvestorId = new Guid("9a1327a4-99ef-4e7f-9bb2-df6b5afaf47f"),
                            ItemId = new Guid("4c029b73-6a64-4811-9cfc-127d53a9f70c"),
                            Amount = 20m,
                            Tier = 1,
                            UpdatedAt = new DateTime(2023, 5, 19, 21, 11, 31, 693, DateTimeKind.Utc).AddTicks(7785)
                        },
                        new
                        {
                            InvestorId = new Guid("e8b0c149-6eb0-4c7c-a6ce-0bc611d6811c"),
                            ItemId = new Guid("0f236e58-01dd-4102-a46b-d714f9968fd6"),
                            Amount = 200m,
                            Tier = 2,
                            UpdatedAt = new DateTime(2023, 5, 19, 21, 11, 31, 693, DateTimeKind.Utc).AddTicks(7787)
                        },
                        new
                        {
                            InvestorId = new Guid("e8b0c149-6eb0-4c7c-a6ce-0bc611d6811c"),
                            ItemId = new Guid("df1a1696-3e0a-49e9-8a32-119b2e44943b"),
                            Amount = 20000m,
                            Tier = 3,
                            UpdatedAt = new DateTime(2023, 5, 19, 21, 11, 31, 693, DateTimeKind.Utc).AddTicks(7799)
                        },
                        new
                        {
                            InvestorId = new Guid("0168eabd-999e-4c37-9c1a-5f198f2a90c8"),
                            ItemId = new Guid("4c029b73-6a64-4811-9cfc-127d53a9f70c"),
                            Amount = 30m,
                            Tier = 1,
                            UpdatedAt = new DateTime(2023, 5, 19, 21, 11, 31, 693, DateTimeKind.Utc).AddTicks(7801)
                        },
                        new
                        {
                            InvestorId = new Guid("9a1327a4-99ef-4e7f-9bb2-df6b5afaf47f"),
                            ItemId = new Guid("0f236e58-01dd-4102-a46b-d714f9968fd6"),
                            Amount = 300m,
                            Tier = 2,
                            UpdatedAt = new DateTime(2023, 5, 19, 21, 11, 31, 693, DateTimeKind.Utc).AddTicks(7806)
                        },
                        new
                        {
                            InvestorId = new Guid("e8b0c149-6eb0-4c7c-a6ce-0bc611d6811c"),
                            ItemId = new Guid("2bb545e9-a707-4d97-a87c-9a59cacb0b94"),
                            Amount = 30000m,
                            Tier = 3,
                            UpdatedAt = new DateTime(2023, 5, 19, 21, 11, 31, 693, DateTimeKind.Utc).AddTicks(7807)
                        },
                        new
                        {
                            InvestorId = new Guid("9a1327a4-99ef-4e7f-9bb2-df6b5afaf47f"),
                            ItemId = new Guid("70c53c66-2506-4f04-9fc3-52fa6c974345"),
                            Amount = 40m,
                            Tier = 1,
                            UpdatedAt = new DateTime(2023, 5, 19, 21, 11, 31, 693, DateTimeKind.Utc).AddTicks(7809)
                        });
                });

            modelBuilder.Entity("Shared.Models.Items.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Goal")
                        .HasColumnType("numeric");

                    b.Property<List<string>>("Images")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("MainWebsite")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OrganisationId")
                        .HasColumnType("uuid");

                    b.Property<List<decimal>>("Prices")
                        .IsRequired()
                        .HasColumnType("numeric[]");

                    b.Property<Guid>("SubcategoryId")
                        .HasColumnType("uuid");

                    b.Property<Dictionary<string, string>>("Tiers")
                        .IsRequired()
                        .HasColumnType("hstore");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("SubcategoryId");

                    b.ToTable("Items");

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Shared.Models.Subcategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Subcategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("58e896b8-9848-4ccf-9125-017b9a3d5539"),
                            CategoryId = new Guid("98d5078f-77f5-4434-a341-ec3962082598"),
                            Description = "Educational projects related to frontend development",
                            Name = "Frontend development"
                        },
                        new
                        {
                            Id = new Guid("48d34f09-27fd-4a8d-ad31-27568ea467e8"),
                            CategoryId = new Guid("98d5078f-77f5-4434-a341-ec3962082598"),
                            Description = "Educational projects related to backend development",
                            Name = "Backend development"
                        },
                        new
                        {
                            Id = new Guid("74d049cb-4c0c-4077-8d1f-263eff5bbcb0"),
                            CategoryId = new Guid("b0c97478-5310-4f24-9eee-6049d08f3e97"),
                            Description = "Educational projects related to calculus",
                            Name = "Calculus"
                        },
                        new
                        {
                            Id = new Guid("b047a9d8-4560-4dcd-b460-c87ca7221d91"),
                            CategoryId = new Guid("b0c97478-5310-4f24-9eee-6049d08f3e97"),
                            Description = "Educational projects related to applied mathematics",
                            Name = "Applied mathematics"
                        },
                        new
                        {
                            Id = new Guid("e935e059-ef32-4ed6-8fb3-e39182260540"),
                            CategoryId = new Guid("a6413346-1556-4533-ad74-00326d536b43"),
                            Description = "Educational projects related to quantum mechanics",
                            Name = "Quantum mechanics"
                        },
                        new
                        {
                            Id = new Guid("8c59ebad-51d8-42a2-88e3-180674691d69"),
                            CategoryId = new Guid("a6413346-1556-4533-ad74-00326d536b43"),
                            Description = "Educational projects related to experimental physics",
                            Name = "Experimental physics"
                        },
                        new
                        {
                            Id = new Guid("3b122cd6-8c99-47f0-8519-00cea6942e5e"),
                            CategoryId = new Guid("6ac1a39b-eab0-4d83-92e0-e371eeffff3f"),
                            Description = "Educational projects related to organic chemistry",
                            Name = "Organic chemistry"
                        },
                        new
                        {
                            Id = new Guid("d77a7fc9-20e4-435b-af4c-fccdbc486c4f"),
                            CategoryId = new Guid("6ac1a39b-eab0-4d83-92e0-e371eeffff3f"),
                            Description = "Educational projects related to inorganic chemistry",
                            Name = "Inorganic chemistry"
                        },
                        new
                        {
                            Id = new Guid("5e9e538c-3a18-4ed0-9c8f-b471858fb73a"),
                            CategoryId = new Guid("7a72f249-29bd-41f0-b44f-28391b17b17b"),
                            Description = "Educational projects related to molecular biology",
                            Name = "Molecular biology"
                        },
                        new
                        {
                            Id = new Guid("88eac436-3ae8-4746-8790-20078a7bab4f"),
                            CategoryId = new Guid("7a72f249-29bd-41f0-b44f-28391b17b17b"),
                            Description = "Educational projects related to zoology",
                            Name = "Zoology"
                        },
                        new
                        {
                            Id = new Guid("1c0a1ce5-dd24-488b-9f33-3e76fcdba76d"),
                            CategoryId = new Guid("27570ac3-1f57-4dcc-9335-c82bae4cd9a8"),
                            Description = "Educational projects related to microeconomics",
                            Name = "Microeconomics"
                        },
                        new
                        {
                            Id = new Guid("550b4dd1-d494-4923-91a6-7b0a03c2ffb2"),
                            CategoryId = new Guid("27570ac3-1f57-4dcc-9335-c82bae4cd9a8"),
                            Description = "Educational projects related to macroeconomics",
                            Name = "Macroeconomics"
                        });
                });

            modelBuilder.Entity("Shared.Models.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Dictionary<string, string>>("Claims")
                        .IsRequired()
                        .HasColumnType("hstore");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Dictionary<string, string>>("SocialLinks")
                        .IsRequired()
                        .HasColumnType("hstore");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("WalletAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Shared.Models.Items.Application", b =>
                {
                    b.HasBaseType("Shared.Models.Items.Item");

                    b.Property<string>("AppPurpose")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EstimatedNumberOfUsers")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EstimatedRelease")
                        .HasColumnType("timestamp with time zone");

                    b.Property<List<string>>("Features")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<List<string>>("Markets")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasDiscriminator().HasValue(1);

                    b.HasData(
                        new
                        {
                            Id = new Guid("70c53c66-2506-4f04-9fc3-52fa6c974345"),
                            CategoryId = new Guid("98d5078f-77f5-4434-a341-ec3962082598"),
                            Description = "The greatest learnign app to exist",
                            Goal = 10000m,
                            Images = new List<string> { "pfp", "stuffaboutapp" },
                            MainWebsite = "https://randomwebsite.com",
                            Name = "LearnApp",
                            OrganisationId = new Guid("ca252b1a-20cc-420e-a41c-5a458c87a9d9"),
                            Prices = new List<decimal> { 10m, 100m, 1000m },
                            SubcategoryId = new Guid("58e896b8-9848-4ccf-9125-017b9a3d5539"),
                            Tiers = new Dictionary<string, string> { ["Bronze"] = "Basic tier", ["Silver"] = "Middle tier", ["Gold"] = "Best tier" },
                            Type = 1,
                            UpdatedAt = new DateTime(2023, 5, 19, 21, 11, 31, 693, DateTimeKind.Utc).AddTicks(7427),
                            AppPurpose = "To teach people how to learn",
                            EstimatedNumberOfUsers = 1000000,
                            EstimatedRelease = new DateTime(2024, 5, 18, 21, 11, 31, 693, DateTimeKind.Utc).AddTicks(7401),
                            Features = new List<string> { "Good learinng experience", "Amazing customer support" },
                            Markets = new List<string> { "Android", "Ios" }
                        },
                        new
                        {
                            Id = new Guid("4c029b73-6a64-4811-9cfc-127d53a9f70c"),
                            CategoryId = new Guid("a6413346-1556-4533-ad74-00326d536b43"),
                            Description = "The greatest teaching app to exist",
                            Goal = 10000m,
                            Images = new List<string> { "pfp", "stuffaboutapp" },
                            MainWebsite = "https://randomwebsite.com",
                            Name = "TeachApp",
                            OrganisationId = new Guid("ca252b1a-20cc-420e-a41c-5a458c87a9d9"),
                            Prices = new List<decimal> { 10m, 100m, 1000m },
                            SubcategoryId = new Guid("d77a7fc9-20e4-435b-af4c-fccdbc486c4f"),
                            Tiers = new Dictionary<string, string> { ["Bronze"] = "Basic tier", ["Silver"] = "Middle tier", ["Gold"] = "Best tier" },
                            Type = 1,
                            UpdatedAt = new DateTime(2023, 5, 19, 21, 11, 31, 693, DateTimeKind.Utc).AddTicks(7445),
                            AppPurpose = "To teach people how to teach",
                            EstimatedNumberOfUsers = 1000000,
                            EstimatedRelease = new DateTime(2024, 5, 18, 21, 11, 31, 693, DateTimeKind.Utc).AddTicks(7437),
                            Features = new List<string> { "Good teaching experience", "Amazing customer support" },
                            Markets = new List<string> { "Android", "Ios" }
                        });
                });

            modelBuilder.Entity("Shared.Models.Items.Course", b =>
                {
                    b.HasBaseType("Shared.Models.Items.Item");

                    b.Property<int?>("ActiveStudents")
                        .HasColumnType("integer");

                    b.Property<Dictionary<string, string>>("Curriculum")
                        .IsRequired()
                        .HasColumnType("hstore");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ExpectedApplicants")
                        .HasColumnType("integer");

                    b.Property<int?>("ExpectedGraduates")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasDiscriminator().HasValue(0);

                    b.HasData(
                        new
                        {
                            Id = new Guid("90dc3649-72c2-4755-8f83-52876342069e"),
                            CategoryId = new Guid("b0c97478-5310-4f24-9eee-6049d08f3e97"),
                            Description = "The greatest course to exist",
                            Goal = 10000m,
                            Images = new List<string> { "pfp", "stuffaboutapp" },
                            MainWebsite = "https://randomwebsite.com",
                            Name = "Webapi Course",
                            OrganisationId = new Guid("56c7cf03-03cd-4964-87a0-c764601a8214"),
                            Prices = new List<decimal> { 10m, 100m, 1000m },
                            SubcategoryId = new Guid("b047a9d8-4560-4dcd-b460-c87ca7221d91"),
                            Tiers = new Dictionary<string, string> { ["Bronze"] = "Basic tier", ["Silver"] = "Middle tier", ["Gold"] = "Best tier" },
                            Type = 0,
                            UpdatedAt = new DateTime(2023, 5, 19, 21, 11, 31, 693, DateTimeKind.Utc).AddTicks(7569),
                            Curriculum = new Dictionary<string, string> { ["1st lesson"] = "Github", ["2nd lesson"] = "Webapi" },
                            EndDate = new DateTime(2023, 11, 18, 9, 11, 31, 693, DateTimeKind.Utc).AddTicks(7555),
                            ExpectedApplicants = 100000,
                            ExpectedGraduates = 100,
                            StartDate = new DateTime(2023, 8, 10, 9, 11, 31, 693, DateTimeKind.Utc).AddTicks(7559)
                        },
                        new
                        {
                            Id = new Guid("2bb545e9-a707-4d97-a87c-9a59cacb0b94"),
                            CategoryId = new Guid("98d5078f-77f5-4434-a341-ec3962082598"),
                            Description = "The greatest course to exist",
                            Goal = 10000m,
                            Images = new List<string> { "pfp", "stuffaboutapp" },
                            MainWebsite = "https://randomwebsite.com",
                            Name = "React Course",
                            OrganisationId = new Guid("56c7cf03-03cd-4964-87a0-c764601a8214"),
                            Prices = new List<decimal> { 10m, 100m, 1000m },
                            SubcategoryId = new Guid("58e896b8-9848-4ccf-9125-017b9a3d5539"),
                            Tiers = new Dictionary<string, string> { ["Bronze"] = "Basic tier", ["Silver"] = "Middle tier", ["Gold"] = "Best tier" },
                            Type = 0,
                            UpdatedAt = new DateTime(2023, 5, 19, 21, 11, 31, 693, DateTimeKind.Utc).AddTicks(7654),
                            Curriculum = new Dictionary<string, string> { ["1st lesson"] = "Github", ["2nd lesson"] = "React" },
                            EndDate = new DateTime(2023, 11, 18, 9, 11, 31, 693, DateTimeKind.Utc).AddTicks(7625),
                            ExpectedApplicants = 100000,
                            ExpectedGraduates = 100,
                            StartDate = new DateTime(2023, 8, 10, 9, 11, 31, 693, DateTimeKind.Utc).AddTicks(7626)
                        });
                });

            modelBuilder.Entity("Shared.Models.Items.Event", b =>
                {
                    b.HasBaseType("Shared.Models.Items.Item");

                    b.Property<Dictionary<string, string>>("Activities")
                        .IsRequired()
                        .HasColumnType("hstore");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ExpectedAttendance")
                        .HasColumnType("integer");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<string>>("NotableAttendees")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<List<string>>("NotableSpeakers")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<decimal>("TicketPrice")
                        .HasColumnType("numeric");

                    b.HasDiscriminator().HasValue(4);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2767b9f3-6573-4b88-9df5-a9974601a020"),
                            CategoryId = new Guid("6ac1a39b-eab0-4d83-92e0-e371eeffff3f"),
                            Description = "The greatest learning event to exist",
                            Goal = 10000m,
                            Images = new List<string> { "pfp", "stuffaboutapp" },
                            MainWebsite = "https://randomwebsite.com",
                            Name = "LearnConference",
                            OrganisationId = new Guid("56c7cf03-03cd-4964-87a0-c764601a8214"),
                            Prices = new List<decimal> { 10m, 100m, 1000m },
                            SubcategoryId = new Guid("1c0a1ce5-dd24-488b-9f33-3e76fcdba76d"),
                            Tiers = new Dictionary<string, string> { ["Bronze"] = "Basic tier", ["Silver"] = "Middle tier", ["Gold"] = "Best tier" },
                            Type = 4,
                            UpdatedAt = new DateTime(2023, 5, 19, 21, 11, 31, 693, DateTimeKind.Utc).AddTicks(7467),
                            Activities = new Dictionary<string, string> { ["12am"] = "pizza", ["1pm"] = "Work" },
                            Capacity = 3000,
                            Date = new DateTime(2023, 6, 18, 21, 11, 31, 693, DateTimeKind.Utc).AddTicks(7458),
                            ExpectedAttendance = 1999,
                            Location = "Zagreb",
                            NotableAttendees = new List<string> { "CEO" },
                            NotableSpeakers = new List<string> { "Lead dev" },
                            TicketPrice = 100m
                        },
                        new
                        {
                            Id = new Guid("0f236e58-01dd-4102-a46b-d714f9968fd6"),
                            CategoryId = new Guid("6ac1a39b-eab0-4d83-92e0-e371eeffff3f"),
                            Description = "The greatest design event to exist",
                            Goal = 10000m,
                            Images = new List<string> { "pfp", "stuffaboutapp" },
                            MainWebsite = "https://randomwebsite.com",
                            Name = "designConference",
                            OrganisationId = new Guid("56c7cf03-03cd-4964-87a0-c764601a8214"),
                            Prices = new List<decimal> { 10m, 100m, 1000m },
                            SubcategoryId = new Guid("550b4dd1-d494-4923-91a6-7b0a03c2ffb2"),
                            Tiers = new Dictionary<string, string> { ["Bronze"] = "Basic tier", ["Silver"] = "Middle tier", ["Gold"] = "Best tier" },
                            Type = 4,
                            UpdatedAt = new DateTime(2023, 5, 19, 21, 11, 31, 693, DateTimeKind.Utc).AddTicks(7480),
                            Activities = new Dictionary<string, string> { ["12am"] = "pizza", ["1pm"] = "Work" },
                            Capacity = 3000,
                            Date = new DateTime(2023, 6, 18, 21, 11, 31, 693, DateTimeKind.Utc).AddTicks(7474),
                            ExpectedAttendance = 1999,
                            Location = "Split",
                            NotableAttendees = new List<string> { "CEO" },
                            NotableSpeakers = new List<string> { "Lead designer" },
                            TicketPrice = 100m
                        });
                });

            modelBuilder.Entity("Shared.Models.Items.OnlineCourse", b =>
                {
                    b.HasBaseType("Shared.Models.Items.Item");

                    b.Property<int>("AvarageDuration")
                        .HasColumnType("integer");

                    b.Property<int>("ExpectedAudience")
                        .HasColumnType("integer");

                    b.Property<Dictionary<string, string>>("Lessons")
                        .IsRequired()
                        .HasColumnType("hstore");

                    b.Property<List<DateTime>>("LessonsDate")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone[]");

                    b.Property<Dictionary<string, string>>("LinksToChannels")
                        .IsRequired()
                        .HasColumnType("hstore");

                    b.HasDiscriminator().HasValue(3);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c31cd899-2cd7-4829-be5f-681186f65240"),
                            CategoryId = new Guid("98d5078f-77f5-4434-a341-ec3962082598"),
                            Description = "The greatest online course to exist",
                            Goal = 10000m,
                            Images = new List<string> { "pfp", "stuffaboutapp" },
                            MainWebsite = "https://randomwebsite.com",
                            Name = "React online Course",
                            OrganisationId = new Guid("56c7cf03-03cd-4964-87a0-c764601a8214"),
                            Prices = new List<decimal> { 10m, 100m, 1000m },
                            SubcategoryId = new Guid("58e896b8-9848-4ccf-9125-017b9a3d5539"),
                            Tiers = new Dictionary<string, string> { ["Bronze"] = "Basic tier", ["Silver"] = "Middle tier", ["Gold"] = "Best tier" },
                            Type = 0,
                            UpdatedAt = new DateTime(2023, 5, 19, 21, 11, 31, 693, DateTimeKind.Utc).AddTicks(7740),
                            AvarageDuration = 12,
                            ExpectedAudience = 100,
                            Lessons = new Dictionary<string, string> { ["1st lesson"] = "Github", ["2nd lesson"] = "React" },
                            LessonsDate = new List<DateTime> { new DateTime(2023, 5, 21, 21, 11, 31, 693, DateTimeKind.Utc).AddTicks(7682), new DateTime(2023, 5, 22, 21, 11, 31, 693, DateTimeKind.Utc).AddTicks(7687), new DateTime(2023, 5, 23, 21, 11, 31, 693, DateTimeKind.Utc).AddTicks(7687) },
                            LinksToChannels = new Dictionary<string, string> { ["youtube"] = "stuff", ["facebook"] = "morestruff" }
                        },
                        new
                        {
                            Id = new Guid("df1a1696-3e0a-49e9-8a32-119b2e44943b"),
                            CategoryId = new Guid("98d5078f-77f5-4434-a341-ec3962082598"),
                            Description = "The greatest online course to exist",
                            Goal = 10000m,
                            Images = new List<string> { "pfp", "stuffaboutapp" },
                            MainWebsite = "https://randomwebsite.com",
                            Name = "Webapi online Course",
                            OrganisationId = new Guid("56c7cf03-03cd-4964-87a0-c764601a8214"),
                            Prices = new List<decimal> { 10m, 100m, 1000m },
                            SubcategoryId = new Guid("58e896b8-9848-4ccf-9125-017b9a3d5539"),
                            Tiers = new Dictionary<string, string> { ["Bronze"] = "Basic tier", ["Silver"] = "Middle tier", ["Gold"] = "Best tier" },
                            Type = 0,
                            UpdatedAt = new DateTime(2023, 5, 19, 21, 11, 31, 693, DateTimeKind.Utc).AddTicks(7771),
                            AvarageDuration = 12,
                            ExpectedAudience = 100,
                            Lessons = new Dictionary<string, string> { ["1st lesson"] = "Github", ["2nd lesson"] = "Wrbapi" },
                            LessonsDate = new List<DateTime> { new DateTime(2023, 5, 21, 21, 11, 31, 693, DateTimeKind.Utc).AddTicks(7747), new DateTime(2023, 5, 22, 21, 11, 31, 693, DateTimeKind.Utc).AddTicks(7748), new DateTime(2023, 5, 23, 21, 11, 31, 693, DateTimeKind.Utc).AddTicks(7749) },
                            LinksToChannels = new Dictionary<string, string> { ["youtube"] = "stuff", ["facebook"] = "morestruff" }
                        });
                });

            modelBuilder.Entity("Shared.Models.Users.Investor", b =>
                {
                    b.HasBaseType("Shared.Models.Users.User");

                    b.Property<int>("NumberOfEmployees")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue(1);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e8b0c149-6eb0-4c7c-a6ce-0bc611d6811c"),
                            Claims = new Dictionary<string, string> { ["trusted_member"] = "true" },
                            Description = "Descriptiojn of a fake company",
                            Email = "fakecompany@gmail.com",
                            LocationName = "Split",
                            Name = "FakeCompany",
                            Password = "ZANw5TTVqnUKiJOZ7tT7YkbtjMBmlIw1u4I5OPY3GLBCghx4",
                            ProfilePicture = "pfp",
                            SocialLinks = new Dictionary<string, string> { ["facebook"] = "facebook.com" },
                            Type = 1,
                            UpdatedAt = new DateTime(2023, 5, 19, 21, 11, 31, 496, DateTimeKind.Utc).AddTicks(2674),
                            WalletAddress = "1GSnK58N6XUkyGFGbqMDuzt1u3xhGAkTtS",
                            NumberOfEmployees = 10
                        },
                        new
                        {
                            Id = new Guid("0168eabd-999e-4c37-9c1a-5f198f2a90c8"),
                            Claims = new Dictionary<string, string> { ["trusted_member"] = "true", ["admin"] = "true" },
                            Description = "Descriptiojn of a fake company",
                            Email = "fakecompany1@gmail.com",
                            LocationName = "Zagreb",
                            Name = "FakeAdmiinCompany",
                            Password = "/czRqA8NjUMH+Yg6yLePtDg8fMr7GMusRBmc0Rkb77RKYc6d",
                            ProfilePicture = "pfp",
                            SocialLinks = new Dictionary<string, string> { ["facebook"] = "facebook.com" },
                            Type = 1,
                            UpdatedAt = new DateTime(2023, 5, 19, 21, 11, 31, 527, DateTimeKind.Utc).AddTicks(1736),
                            WalletAddress = "1GSnK58N6XukyGFGbqMDuzt1u3xhGAkTtS",
                            NumberOfEmployees = 10
                        },
                        new
                        {
                            Id = new Guid("9a1327a4-99ef-4e7f-9bb2-df6b5afaf47f"),
                            Claims = new Dictionary<string, string> { ["trusted_member"] = "true" },
                            Description = "Descriptiojn of a fake investor",
                            Email = "investor@gmail.com",
                            LocationName = "London",
                            Name = "Investor",
                            Password = "i0u30/ACXaSNvuDCK/AjSL25F5xj0xrgCW4qeVNarFhFw4B9",
                            ProfilePicture = "pfp",
                            SocialLinks = new Dictionary<string, string> { ["facebook"] = "facebook.com" },
                            Type = 1,
                            UpdatedAt = new DateTime(2023, 5, 19, 21, 11, 31, 560, DateTimeKind.Utc).AddTicks(681),
                            WalletAddress = "1GSnK58N6XukygFGbqMDuzt1u3xhGAkTtS",
                            NumberOfEmployees = 10
                        });
                });

            modelBuilder.Entity("Shared.Models.Users.Organisation", b =>
                {
                    b.HasBaseType("Shared.Models.Users.User");

                    b.Property<int>("NumberOfMembers")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue(2);

                    b.HasData(
                        new
                        {
                            Id = new Guid("56c7cf03-03cd-4964-87a0-c764601a8214"),
                            Claims = new Dictionary<string, string> { ["trusted_member"] = "true" },
                            Description = "Descriptiojn of a fake event organisator",
                            Email = "evets@gmail.com",
                            LocationName = "Split",
                            Name = "Fake event organisator",
                            Password = "dJ4nwZHPuz071eQdN3yvg9TntSfXVo9E3C7n1Co4uqc6rysd",
                            ProfilePicture = "pfp",
                            SocialLinks = new Dictionary<string, string> { ["facebook"] = "facebook.com" },
                            Type = 2,
                            UpdatedAt = new DateTime(2023, 5, 19, 21, 11, 31, 591, DateTimeKind.Utc).AddTicks(3653),
                            WalletAddress = "1GSnK5oN6XUkyGFGbqMDuzt1u3xhGAkTtS",
                            NumberOfMembers = 10
                        },
                        new
                        {
                            Id = new Guid("ca252b1a-20cc-420e-a41c-5a458c87a9d9"),
                            Claims = new Dictionary<string, string> { ["trusted_member"] = "true", ["admin"] = "true" },
                            Description = "Descriptiojn of a fake company",
                            Email = "fakecourse@gmail.com",
                            LocationName = "Hvar",
                            Name = "RandomCourseCompany",
                            Password = "pKzzCTs/gQ7zHXNyc+6wpkMmzk+zuStN2Ub62QbkXhzVDKQ/",
                            ProfilePicture = "pfp",
                            SocialLinks = new Dictionary<string, string> { ["facebook"] = "facebook.com" },
                            Type = 2,
                            UpdatedAt = new DateTime(2023, 5, 19, 21, 11, 31, 625, DateTimeKind.Utc).AddTicks(3279),
                            WalletAddress = "1GSnK58N6XukyGFGbqMDuzt1u3xhGAkTtS",
                            NumberOfMembers = 10
                        },
                        new
                        {
                            Id = new Guid("6fb26750-52a5-4fa8-9c93-7baf1fb5424c"),
                            Claims = new Dictionary<string, string> { ["trusted_member"] = "true" },
                            Description = "Descriptiojn of a fake organisation",
                            Email = "organisation@gmail.com",
                            LocationName = "London",
                            Name = "Organisation",
                            Password = "iDe5eZ0+pu/1twTS4wPdOKTM+fTOIbZmD5NmU1/rRY5ez/18",
                            ProfilePicture = "pfp",
                            SocialLinks = new Dictionary<string, string> { ["facebook"] = "facebook.com" },
                            Type = 1,
                            UpdatedAt = new DateTime(2023, 5, 19, 21, 11, 31, 658, DateTimeKind.Utc).AddTicks(8804),
                            WalletAddress = "1GsnK58N6XukygFGbqMDuzt1u3xhGAkTtS",
                            NumberOfMembers = 10
                        });
                });

            modelBuilder.Entity("Shared.Models.Users.Student", b =>
                {
                    b.HasBaseType("Shared.Models.Users.User");

                    b.Property<DateTime>("BegginingOfEducation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CV")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CollegeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CollegeWebsite")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Course")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndOfEducation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FunderId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("SchoolarshipPrice")
                        .HasColumnType("numeric");

                    b.HasIndex("FieldId");

                    b.HasIndex("FunderId");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("Shared.Models.Investments", b =>
                {
                    b.HasOne("Shared.Models.Users.Investor", "Investor")
                        .WithMany("Investments")
                        .HasForeignKey("InvestorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared.Models.Items.Item", "Item")
                        .WithMany("Investments")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Investor");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Shared.Models.Items.Item", b =>
                {
                    b.HasOne("Shared.Models.Category", "Category")
                        .WithMany("Items")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared.Models.Users.Organisation", "Organisation")
                        .WithMany("Items")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared.Models.Subcategory", "Subcategory")
                        .WithMany("Items")
                        .HasForeignKey("SubcategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Organisation");

                    b.Navigation("Subcategory");
                });

            modelBuilder.Entity("Shared.Models.Subcategory", b =>
                {
                    b.HasOne("Shared.Models.Category", "Category")
                        .WithMany("Subcategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Shared.Models.Users.Student", b =>
                {
                    b.HasOne("Shared.Models.Field", "Field")
                        .WithMany("Students")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared.Models.Users.Investor", "Funder")
                        .WithMany("Students")
                        .HasForeignKey("FunderId");

                    b.Navigation("Field");

                    b.Navigation("Funder");
                });

            modelBuilder.Entity("Shared.Models.Category", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Subcategories");
                });

            modelBuilder.Entity("Shared.Models.Field", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Shared.Models.Items.Item", b =>
                {
                    b.Navigation("Investments");
                });

            modelBuilder.Entity("Shared.Models.Subcategory", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Shared.Models.Users.Investor", b =>
                {
                    b.Navigation("Investments");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("Shared.Models.Users.Organisation", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
