// <auto-generated />
using System;
using System.Collections.Generic;
using Data.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(EdInvestContext))]
    [Migration("20230511004241_bruh")]
    partial class bruh
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "item_type", new[] { "course", "application", "bootcamp", "online_course", "event" });
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "hstore");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Shared.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Shared.Models.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Flag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Shared.Models.Field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Field");
                });

            modelBuilder.Entity("Shared.Models.Investments", b =>
                {
                    b.Property<Guid>("InvestorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Tier")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("InvestorId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("Investments");
                });

            modelBuilder.Entity("Shared.Models.Items.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("CurrentAmount")
                        .HasColumnType("numeric");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Goal")
                        .HasColumnType("numeric");

                    b.Property<List<string>>("Images")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OrganisationId")
                        .HasColumnType("uuid");

                    b.Property<List<decimal>>("Prices")
                        .IsRequired()
                        .HasColumnType("numeric[]");

                    b.Property<Guid>("SubcategoryId")
                        .HasColumnType("uuid");

                    b.Property<Dictionary<string, string>>("Tiers")
                        .IsRequired()
                        .HasColumnType("hstore");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CountryId");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("SubcategoryId");

                    b.ToTable("Items");

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Shared.Models.Subcategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Subcategories");
                });

            modelBuilder.Entity("Shared.Models.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Balance")
                        .HasColumnType("numeric");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Dictionary<string, string>>("SocialLinks")
                        .IsRequired()
                        .HasColumnType("hstore");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("WalletAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Users");

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Shared.Models.Items.Application", b =>
                {
                    b.HasBaseType("Shared.Models.Items.Item");

                    b.Property<string>("AppPurpose")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EstimatedNumberOfUsers")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EstimatedRelease")
                        .HasColumnType("timestamp with time zone");

                    b.Property<List<string>>("Features")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<List<string>>("Markets")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Shared.Models.Items.Course", b =>
                {
                    b.HasBaseType("Shared.Models.Items.Item");

                    b.Property<int?>("ActiveStudents")
                        .HasColumnType("integer");

                    b.Property<Dictionary<string, string>>("Curriculum")
                        .IsRequired()
                        .HasColumnType("hstore");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ExpectedApplicants")
                        .HasColumnType("integer");

                    b.Property<int?>("ExpectedGraduates")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("Shared.Models.Items.Event", b =>
                {
                    b.HasBaseType("Shared.Models.Items.Item");

                    b.Property<Dictionary<string, string>>("Activities")
                        .IsRequired()
                        .HasColumnType("hstore");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ExpectedAttendance")
                        .HasColumnType("integer");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<string>>("NotableAttendees")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<List<string>>("NotableSpeakers")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<decimal>("TicketPrice")
                        .HasColumnType("numeric");

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("Shared.Models.Items.OnlineCourse", b =>
                {
                    b.HasBaseType("Shared.Models.Items.Item");

                    b.Property<int>("AvarageDuration")
                        .HasColumnType("integer");

                    b.Property<int>("ExpectedAudience")
                        .HasColumnType("integer");

                    b.Property<Dictionary<string, string>>("Lessons")
                        .IsRequired()
                        .HasColumnType("hstore");

                    b.Property<List<DateTime>>("LessonsDate")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone[]");

                    b.Property<Dictionary<string, string>>("LinksToChannels")
                        .IsRequired()
                        .HasColumnType("hstore");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("Shared.Models.Users.Investor", b =>
                {
                    b.HasBaseType("Shared.Models.Users.User");

                    b.Property<int>("NumberOfEmployees")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Shared.Models.Users.Organisation", b =>
                {
                    b.HasBaseType("Shared.Models.Users.User");

                    b.Property<int>("NumberOfMembers")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Shared.Models.Users.Student", b =>
                {
                    b.HasBaseType("Shared.Models.Users.User");

                    b.Property<DateTime>("BegginingOfEducation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CV")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CollegeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CollegeWebsite")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Course")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndOfEducation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FieldId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FunderId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("SchoolarshipPrice")
                        .HasColumnType("numeric");

                    b.HasIndex("FieldId");

                    b.HasIndex("FunderId");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("Shared.Models.Investments", b =>
                {
                    b.HasOne("Shared.Models.Users.Investor", "Investor")
                        .WithMany("Investments")
                        .HasForeignKey("InvestorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared.Models.Items.Item", "Item")
                        .WithMany("Investments")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Investor");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Shared.Models.Items.Item", b =>
                {
                    b.HasOne("Shared.Models.Category", "Category")
                        .WithMany("Items")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared.Models.Users.Organisation", "Organisation")
                        .WithMany("Items")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared.Models.Subcategory", "Subcategory")
                        .WithMany("Items")
                        .HasForeignKey("SubcategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Country");

                    b.Navigation("Organisation");

                    b.Navigation("Subcategory");
                });

            modelBuilder.Entity("Shared.Models.Subcategory", b =>
                {
                    b.HasOne("Shared.Models.Category", "Category")
                        .WithMany("Subcategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Shared.Models.Users.User", b =>
                {
                    b.HasOne("Shared.Models.Country", "Country")
                        .WithMany("Users")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Shared.Models.Users.Student", b =>
                {
                    b.HasOne("Shared.Models.Field", "Field")
                        .WithMany("Students")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared.Models.Users.Investor", "Funder")
                        .WithMany("Students")
                        .HasForeignKey("FunderId");

                    b.Navigation("Field");

                    b.Navigation("Funder");
                });

            modelBuilder.Entity("Shared.Models.Category", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Subcategories");
                });

            modelBuilder.Entity("Shared.Models.Country", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Shared.Models.Field", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Shared.Models.Items.Item", b =>
                {
                    b.Navigation("Investments");
                });

            modelBuilder.Entity("Shared.Models.Subcategory", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Shared.Models.Users.Investor", b =>
                {
                    b.Navigation("Investments");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("Shared.Models.Users.Organisation", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
